// @generated by protobuf-ts 2.8.2
// @generated from protobuf file "chatapp.proto" (package "com.example.demo.grpc", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ChatService } from "./chatapp";
import type { CustomUser } from "./chatapp";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { Empty } from "./chatapp";
import type { ChatMessage } from "./chatapp";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service com.example.demo.grpc.ChatService
 */
export interface IChatServiceClient {
    /**
     * @generated from protobuf rpc: sendMsg(com.example.demo.grpc.ChatMessage) returns (com.example.demo.grpc.Empty);
     */
    sendMsg(input: ChatMessage, options?: RpcOptions): UnaryCall<ChatMessage, Empty>;
    /**
     * @generated from protobuf rpc: receiveMsg(com.example.demo.grpc.CustomUser) returns (stream com.example.demo.grpc.ChatMessage);
     */
    receiveMsg(input: CustomUser, options?: RpcOptions): ServerStreamingCall<CustomUser, ChatMessage>;
}
/**
 * @generated from protobuf service com.example.demo.grpc.ChatService
 */
export class ChatServiceClient implements IChatServiceClient, ServiceInfo {
    typeName = ChatService.typeName;
    methods = ChatService.methods;
    options = ChatService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: sendMsg(com.example.demo.grpc.ChatMessage) returns (com.example.demo.grpc.Empty);
     */
    sendMsg(input: ChatMessage, options?: RpcOptions): UnaryCall<ChatMessage, Empty> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ChatMessage, Empty>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: receiveMsg(com.example.demo.grpc.CustomUser) returns (stream com.example.demo.grpc.ChatMessage);
     */
    receiveMsg(input: CustomUser, options?: RpcOptions): ServerStreamingCall<CustomUser, ChatMessage> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CustomUser, ChatMessage>("serverStreaming", this._transport, method, opt, input);
    }
}
